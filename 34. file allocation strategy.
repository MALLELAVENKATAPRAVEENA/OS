#include <stdio.h>
#include <stdbool.h>

#define MAX_BLOCKS 100
#define MAX_FILES 10

// Structure to represent a file
typedef struct {
    int startBlock;
    int length;
} File;

// Function to initialize memory blocks
void initializeMemory(bool memory[], int totalBlocks) {
    for (int i = 0; i < totalBlocks; i++) {
        memory[i] = false; // Mark all blocks as free
    }
}

// Function to allocate memory using contiguous allocation
bool allocateFile(File files[], bool memory[], int fileIndex, int startBlock, int length, int totalBlocks) {
    // Check if requested blocks are free
    if (startBlock + length > totalBlocks) {
        return false; // Out of bounds
    }
    for (int i = startBlock; i < startBlock + length; i++) {
        if (memory[i]) {
            return false; // Block already allocated
        }
    }

    // Allocate blocks
    for (int i = startBlock; i < startBlock + length; i++) {
        memory[i] = true;
    }

    // Store file information
    files[fileIndex].startBlock = startBlock;
    files[fileIndex].length = length;
    return true;
}

// Function to display memory allocation
void displayMemory(bool memory[], int totalBlocks) {
    printf("Memory Blocks:\n");
    for (int i = 0; i < totalBlocks; i++) {
        printf("[%d] %s\n", i, memory[i] ? "Allocated" : "Free");
    }
}

// Function to display file allocation details
void displayFiles(File files[], int fileCount) {
    printf("\nFile Allocation Details:\n");
    printf("File\tStart Block\tLength\n");
    for (int i = 0; i < fileCount; i++) {
        printf("%d\t%d\t\t%d\n", i + 1, files[i].startBlock, files[i].length);
    }
}

int main() {
    int totalBlocks = 20; // Total memory blocks
    bool memory[MAX_BLOCKS]; // Memory representation
    File files[MAX_FILES]; // Array to store file allocation information

    initializeMemory(memory, totalBlocks);

    // Input embedded in code
    int fileCount = 3;
    int fileRequests[3][2] = { 
        {2, 5}, // File 1: Start at block 2, length 5
        {8, 4}, // File 2: Start at block 8, length 4
        {15, 3} // File 3: Start at block 15, length 3
    };

    printf("Allocating Files...\n");

    for (int i = 0; i < fileCount; i++) {
        if (allocateFile(files, memory, i, fileRequests[i][0], fileRequests[i][1], totalBlocks)) {
            printf("File %d allocated successfully.\n", i + 1);
        } else {
            printf("File %d allocation failed.\n", i + 1);
        }
    }

    // Display the memory and file allocation details
    displayMemory(memory, totalBlocks);
    displayFiles(files, fileCount);

    return 0;
}
