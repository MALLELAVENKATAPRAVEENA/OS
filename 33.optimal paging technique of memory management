#include <stdio.h>
#include <stdbool.h>

#define MAX_FRAMES 10

// Function to find the page to be replaced using Optimal Paging
int findOptimal(int pages[], int n, int frames[], int frameCount, int currentIndex) {
    int farthest = currentIndex, replaceIndex = -1;

    for (int i = 0; i < frameCount; i++) {
        int j;
        for (j = currentIndex; j < n; j++) {
            if (frames[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    replaceIndex = i;
                }
                break;
            }
        }
        // If a frame's page is not used in the future, return its index
        if (j == n) {
            return i;
        }
    }

    return (replaceIndex == -1) ? 0 : replaceIndex;
}

// Function to simulate Optimal Paging
void optimalPaging(int pages[], int n, int frameCount) {
    int frames[MAX_FRAMES];
    int pageFaults = 0;

    for (int i = 0; i < frameCount; i++) {
        frames[i] = -1; // Initialize frames to empty
    }

    for (int i = 0; i < n; i++) {
        bool pageFound = false;

        // Check if the page is already in frames
        for (int j = 0; j < frameCount; j++) {
            if (frames[j] == pages[i]) {
                pageFound = true;
                break;
            }
        }

        // If the page is not found, replace one using the optimal policy
        if (!pageFound) {
            if (i < frameCount) {
                frames[i] = pages[i]; // Fill empty frame
            } else {
                int replaceIndex = findOptimal(pages, n, frames, frameCount, i + 1);
                frames[replaceIndex] = pages[i];
            }
            pageFaults++;
        }

        // Print current state of frames
        printf("Step %d: ", i + 1);
        for (int j = 0; j < frameCount; j++) {
            if (frames[j] == -1)
                printf(" - ");
            else
                printf(" %d ", frames[j]);
        }
        printf("\n");
    }

    printf("\nTotal Page Faults: %d\n", pageFaults);
}

int main() {
    // Embedded inputs
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3};
    int n = sizeof(pages) / sizeof(pages[0]);
    int frameCount = 3;

    printf("Page sequence: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", pages[i]);
    }
    printf("\nNumber of frames: %d\n\n", frameCount);

    // Call the optimal paging simulation
    optimalPaging(pages, n, frameCount);

    return 0;
}
