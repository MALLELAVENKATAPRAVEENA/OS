#include <stdio.h>
#include <stdbool.h>

#define MAX_FRAMES 10
#define MAX_PAGES 100

// Function to find the least recently used page
int findLRU(int time[], int n) {
    int i, minimum = time[0], pos = 0;
    for (i = 1; i < n; ++i) {
        if (time[i] < minimum) {
            minimum = time[i];
            pos = i;
        }
    }
    return pos;
}

void lruPaging(int pages[], int n, int frames[], int frameCount) {
    int time[MAX_FRAMES], counter = 0, faults = 0;
    bool isFound;
    for (int i = 0; i < frameCount; i++) frames[i] = -1;  // Initialize frames

    printf("Page Reference\tFrames\n");

    for (int i = 0; i < n; i++) {
        isFound = false;
        for (int j = 0; j < frameCount; j++) {
            if (frames[j] == pages[i]) {  // Page hit
                counter++;
                time[j] = counter;
                isFound = true;
                break;
            }
        }

        if (!isFound) {  // Page fault
            int replaceIndex = findLRU(time, frameCount);
            frames[replaceIndex] = pages[i];
            counter++;
            time[replaceIndex] = counter;
            faults++;
        }

        // Print current frame state
        printf("%d\t\t", pages[i]);
        for (int j = 0; j < frameCount; j++) {
            if (frames[j] != -1)
                printf("%d ", frames[j]);
            else
                printf("- ");
        }
        printf("\n");
    }

    printf("\nTotal Page Faults: %d\n", faults);
}

int main() {
    int pages[] = {1, 2, 3, 4, 1, 2, 5};  // Page reference sequence
    int n = 7;  // Number of pages
    int frameCount = 3;  // Number of frames
    int frames[MAX_FRAMES];

    printf("Simulating Least Recently Used (LRU) Paging Technique...\n");
    printf("Page Reference Sequence: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", pages[i]);
    }
    printf("\nNumber of Frames: %d\n", frameCount);

    lruPaging(pages, n, frames, frameCount);

    return 0;
}
